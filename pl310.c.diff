Index: sys/arch/arm/cortex/pl310.c
===================================================================
RCS file: /cvsroot/src/sys/arch/arm/cortex/pl310.c,v
retrieving revision 1.20
diff -u -p -r1.20 pl310.c
--- sys/arch/arm/cortex/pl310.c	2 Oct 2021 20:52:09 -0000	1.20
+++ sys/arch/arm/cortex/pl310.c	25 Mar 2025 02:32:33 -0000
@@ -38,17 +38,30 @@ __KERNEL_RCSID(0, "$NetBSD: pl310.c,v 1.
 #include <sys/device.h>
 #include <sys/atomic.h>
 
+#include <dev/fdt/fdtvar.h>
+
 #include <arm/locore.h>
 
 #include <arm/cortex/mpcore_var.h>
 #include <arm/cortex/pl310_reg.h>
 #include <arm/cortex/pl310_var.h>
 
+#include <arm/ti/smc.h>
+
 static int arml2cc_match(device_t, cfdata_t, void *);
 static void arml2cc_attach(device_t, device_t, void *);
 
 #define	L2CC_SIZE	0x1000
 
+enum arml2cc_smc {
+	SMC_OMAP = 1,
+};
+
+static const struct device_compatible_entry compat_data[] = {
+	{ .compat = "ti,omap4",	.value = SMC_OMAP },
+	DEVICE_COMPAT_EOL
+};
+
 struct arml2cc_softc {
 	device_t sc_dev;
 	bus_space_tag_t sc_memt;
@@ -59,6 +72,7 @@ struct arml2cc_softc {
 	struct evcnt sc_ev_wb;
 	struct evcnt sc_ev_wbinv;
 	bool sc_enabled;
+	enum arml2cc_smc sc_smc;
 };
 
 __CTASSERT(offsetof(struct arml2cc_softc, sc_ev_inv.ev_count) % 8 == 0);
@@ -147,6 +161,7 @@ arml2cc_attach(device_t parent, device_t
 	sc->sc_dev = self;
 	sc->sc_memt = mpcaa->mpcaa_memt;
 	sc->sc_waymask = __BIT(arm_scache.dcache_ways) - 1;
+	sc->sc_smc = of_compatible_lookup(OF_finddevice("/"), compat_data)->value;
 
 	evcnt_attach_dynamic(&sc->sc_ev_inv, EVCNT_TYPE_MISC, NULL,
 	    xname, "L2 inv requests");
@@ -240,7 +255,14 @@ arml2cc_disable(struct arml2cc_softc *sc
 	arml2cc_cache_way_op(sc, L2C_CLEAN_INV_WAY, sc->sc_waymask);
 	arml2cc_cache_sync(sc);
 
-	arml2cc_write_4(sc, L2C_CTL, 0);	// turn it off
+	switch (sc->sc_smc) {
+	case SMC_OMAP:
+		omap_smc(0, OMAP4_CMD_L2X0_CTRL);
+		break;
+	default:
+		arml2cc_write_4(sc, L2C_CTL, 0);	// turn it off
+	}
+
 	mutex_spin_exit(&sc->sc_lock);
 }
 
@@ -252,7 +274,13 @@ arml2cc_enable(struct arml2cc_softc *sc)
 	arml2cc_cache_way_op(sc, L2C_INV_WAY, sc->sc_waymask);
 	arml2cc_cache_sync(sc);
 
-	arml2cc_write_4(sc, L2C_CTL, 1);	// turn it on
+	switch (sc->sc_smc) {
+	case SMC_OMAP:
+		omap_smc(1, OMAP4_CMD_L2X0_CTRL);
+		break;
+	default:
+		arml2cc_write_4(sc, L2C_CTL, 1);	// turn it on
+	}
 
 	mutex_spin_exit(&sc->sc_lock);
 }
